<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://kaobeimao.github.io</id>
    <title>kaobeimao</title>
    <updated>2020-05-11T07:05:11.961Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://kaobeimao.github.io"/>
    <link rel="self" href="https://kaobeimao.github.io/atom.xml"/>
    <subtitle>舒服嗷铁汁</subtitle>
    <logo>https://kaobeimao.github.io/images/avatar.png</logo>
    <icon>https://kaobeimao.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, kaobeimao</rights>
    <entry>
        <title type="html"><![CDATA[docker使用nginx部署静态网站]]></title>
        <id>https://kaobeimao.github.io/post/J62G7HsFy/</id>
        <link href="https://kaobeimao.github.io/post/J62G7HsFy/">
        </link>
        <updated>2020-05-11T06:59:22.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-shell">docker pull nginx

docker run -d -p 8086:80 -v /home/app/dist:/app -v /home/config:/etc/nginx/conf.d --name demo-web nginx
</code></pre>
<p>nginx配置文件</p>
<pre><code>server {
    listen 80;
    server_name localhost;
    location / {
        root /app;
        index index.html index.htm;
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ts接口]]></title>
        <id>https://kaobeimao.github.io/post/QRqEP6nER/</id>
        <link href="https://kaobeimao.github.io/post/QRqEP6nER/">
        </link>
        <updated>2020-04-14T08:30:03.000Z</updated>
        <content type="html"><![CDATA[<h3 id="接口的定义">接口的定义</h3>
<p>TypeScript 中的接口是一个非常灵活的概念，除了可用于对类的一部分行为进行抽象以外，也常用于对「对象的形状（Shape）」进行描述。</p>
<pre><code class="language-js">// 定义接口
interface Person {
    readonly id: number; // 只读属性，只能在被创建时被赋值
    name: string;
    age?: number; // 表示可选属性
    /**
     * [propName: string]定义任意属性取string或number
     * 确定属性和可选属性的类型都必须是它的类型的子集
     */
    [propName: string]: string | number;
}

// 赋值的时候，变量的形状必须和接口的形状保持一致。
let tom: Person = {
    name: 'Tom',
    age: 25
};
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[docker安装mysql+phpmydamin]]></title>
        <id>https://kaobeimao.github.io/post/ITHA19twK/</id>
        <link href="https://kaobeimao.github.io/post/ITHA19twK/">
        </link>
        <updated>2019-11-29T07:01:28.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-shell"># docker 中下载 mysql
docker pull mysql

#启动
docker run --name mysql-kbm -p 3306:3306 -e MYSQL_ROOT_PASSWORD=7777 -d mysql

#进入容器
docker exec -it mysql-kbm bash

#登录mysql
mysql -u root -p
ALTER USER 'root'@'localhost' IDENTIFIED BY '7777';

#添加远程登录用户
CREATE USER 'kaobeimao'@'%' IDENTIFIED WITH mysql_native_password BY '7777';
GRANT ALL PRIVILEGES ON *.* TO 'kaobeimao'@'%';
</code></pre>
<pre><code class="language-shell">docker pull phpmyadmin/phpmyadmin

docker run --name myadmin-kbm -d --link mysql-kbm:db -p 8086:80 phpmyadmin/phpmyadmin
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[throw]]></title>
        <id>https://kaobeimao.github.io/post/eEFgrP9g4/</id>
        <link href="https://kaobeimao.github.io/post/eEFgrP9g4/">
        </link>
        <updated>2019-10-28T06:04:48.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>throw语句用来抛出一个用户自定义的异常。当前函数的执行将被停止（throw之后的语句将不会执行），并且控制将被传递到调用堆栈中的第一个catch块。如果调用者函数中没有catch块，程序将会终止。</p>
</blockquote>
<h3 id="示例">示例</h3>
<pre><code class="language-js">throw &quot;Error2&quot; // 抛出了一个值为字符串的异常
throw 42       // 抛出了一个值为整数42的异常
throw true     // 抛出了一个值为true的异常
</code></pre>
<h3 id="抛出对象">抛出对象</h3>
<pre><code class="language-js">function MyException(message) {
    this.name = &quot;MyException&quot;
    this.message = message
}

try {
    ...
    throw new MyException('xxx')
} catch (error) {
    ...
    console.log(error.message, error.name)
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[uni-app自定义TabBar]]></title>
        <id>https://kaobeimao.github.io/post/1pcYfEj_2/</id>
        <link href="https://kaobeimao.github.io/post/1pcYfEj_2/">
        </link>
        <updated>2019-10-27T13:58:14.000Z</updated>
        <content type="html"><![CDATA[<h3 id="vuex管理状态">Vuex管理状态</h3>
<pre><code class="language-js">// state.js
export default {
    currentTabBarIndex: 0,
    myTabBar: [],
    operatorTabBar: [
        {
            &quot;pagePath&quot;: &quot;xxx&quot;,
            &quot;text&quot;: &quot;xxx&quot;,
            &quot;iconPath&quot;: &quot;xxx&quot;,
            &quot;selectedIconPath&quot;: &quot;xxx&quot;
        },
        {
            &quot;pagePath&quot;: &quot;xxx&quot;,
            &quot;text&quot;: &quot;xxx&quot;,
            &quot;iconPath&quot;: &quot;xxx&quot;,
            &quot;selectedIconPath&quot;: &quot;xxx&quot;
        },
        {
            &quot;pagePath&quot;: &quot;xxx&quot;,
            &quot;text&quot;: &quot;xxx&quot;,
            &quot;iconPath&quot;: &quot;xxx&quot;,
            &quot;selectedIconPath&quot;: &quot;xxx&quot;
        },
    ],
    workerTabBar: [
        {
            &quot;pagePath&quot;: &quot;xxx&quot;,
            &quot;text&quot;: &quot;xxx&quot;,
            &quot;iconPath&quot;: &quot;xxx&quot;,
            &quot;selectedIconPath&quot;: &quot;xxx&quot;
        },
        {
            &quot;pagePath&quot;: &quot;xxx&quot;,
            &quot;text&quot;: &quot;xxx&quot;,
            &quot;iconPath&quot;: &quot;xxx&quot;,
            &quot;selectedIconPath&quot;: &quot;xxx&quot;
        },
    ]
}

// mutation-types.js
export const SET_CURRENT_TAB_BAR_INDEX = 'SET_CURRENT_TAB_BAR_INDEX'
export const SET_TAB_BAR = 'SET_TAB_BAR'

// mutation.js
import * as types from './mutation-types'

export default {
    [types.SET_CURRENT_TAB_BAR_INDEX](state, index) {
        state.currentTabBarIndex = index
    },
    [types.SET_TAB_BAR](state, list) {
        state.myTabBar = list
    }
}
</code></pre>
<h3 id="tabbar组件">TabBar组件</h3>
<p>使用cover-view避免小程序canvas层级最高的显示问题</p>
<pre><code class="language-html">&lt;!-- template --&gt;
&lt;template&gt;
    &lt;cover-view class=&quot;footer&quot;&gt;
        &lt;cover-view :class=&quot;'footer_item ' + (currentTabBarIndex === index? 'active' : '')&quot; :style=&quot;'width:'+item_width&quot;
            @click=&quot;setCurrentTabBarIndex(index)&quot; v-for=&quot;(item,index) in myTabBar&quot; :key=&quot;index&quot;&gt;
            &lt;cover-image :src=&quot;index==currentTabBarIndex?item.selectedIconPath:item.iconPath&quot; mode=&quot;&quot;&gt;&lt;/cover-image&gt;
            &lt;cover-view&gt;item.text&lt;/cover-view&gt;
        &lt;/cover-view&gt;
    &lt;/cover-view&gt;
&lt;/template&gt;
</code></pre>
<pre><code class="language-js">// script
import { mapState, mapMutations } from 'vuex'
import * as types from '../../store/mutation-types'

export default {
    data() {
        return {}
    },
    computed: {
        ...mapState(['currentTabBarIndex', 'myTabBar']),
        item_width() {
            const length = this.myTabBar.length
            switch (length) {
                case 1:
                    return '100%'
                    break
                case 2:
                    return '50%'
                    break
                case 3:
                    return '33.3%'
                    break
                case 4:
                    return '25%'
                    break
                case 5:
                    return '20%'
                    break
                default:
                    break
            }
        }
    },
    methods: {
        ...mapMutations({
            setCurrentTabBarIndex: types.SET_CURRENT_TAB_BAR_INDEX
        })
    }
}
</code></pre>
<pre><code class="language-css">&lt;style lang=&quot;scss&quot; scoped&gt;
.footer {
    @include border-top-1px;
    height: 100upx;
    position: fixed;
    bottom: 0;
    left: 0;
    width: 100%;
    background-color: #ffffff;
    color: #606770;
}
.footer_item {
    float: left;
    text-align: center;
    font-size: 24upx;
    height: 100upx;

    &amp;.active {
        color: #007aff;
    }
}
.footer_item cover-image {
    width: 50upx;
    height: 50upx;
    margin: 6upx auto;
}
&lt;/style&gt;
</code></pre>
<h3 id="layout页面">layout页面</h3>
<p>layout组件作为首页，把想要成为TabBar页面的组件和<strong>TabBar</strong>组件一起引入，使用<strong>v-if</strong>显示隐藏</p>
<pre><code class="language-html">&lt;template&gt;
    &lt;div class=&quot;layout&quot;&gt;
        &lt;xxx v-if=&quot;currentPageName === 'xxx'&quot; /&gt;
        &lt;xxx v-else-if=&quot;currentPageName === 'xxx'&quot; /&gt;
        &lt;xxx v-else-if=&quot;currentPageName === 'xxx'&quot; /&gt;
        &lt;xxx v-else-if=&quot;currentPageName === 'xxx'&quot; /&gt;
        &lt;xxx v-else-if=&quot;currentPageName === 'xxx'&quot; /&gt;
        &lt;xxx v-else-if=&quot;currentPageName === 'xxx'&quot; /&gt;
        &lt;TabBar v-if=&quot;showTabBar&quot; /&gt;
    &lt;/div&gt;
&lt;/template&gt;
</code></pre>
<pre><code class="language-js">import { mapState, mapMutations } from 'vuex'
import * as types from '../../store/mutation-types'
import TabBar from '../../components/tab-bar/TabBar'
import xxx from '../overview/index'
import xxx from '../community/index'
import xxx from '../card/index'
import xxx from '../my/index'
import xxx from '../worker-station-create/index'
import xxx from '../worker-station-list/index'

export default {
    components: {
        TabBar,
        xxx,
        xxx,
        xxx,
        xxx,
        xxx,
        xxx
    },
    data() {
        return {
            showTabBar: false
        }
    },
    computed: {
        ...mapState([
            'currentTabBarIndex',
            'myTabBar',
            'workerTabBar',
            'operatorTabBar'
        ]),
        currentPageName() {
            try {
                if (this.myTabBar.length) {
                    this.checkUser()
                    return this.myTabBar[this.currentTabBarIndex].text
                } else {
                    return ''
                }
            } catch (error) {
                return ''
            }
        }
    },
    onLoad() {
        this.checkUser()
        this.handleShowTabBar()
    },
    methods: {
        ...mapMutations({
            setTabBar: types.SET_TAB_BAR
        }),
        checkUser() {
            const myTabBar = '权限判断' ? 'workerTabBar' : 'operatorTabBar'
            this.setTabBar(this[myTabBar])
        },
        handleShowTabBar() {
            /**
             * ！！！安卓设备问题
             * tabbar延迟加载，防止被canvas覆盖
             */
            setTimeout(() =&gt; {
                this.showTabBar = true
            }, 500)
        }
    }
}
</code></pre>
<pre><code class="language-css">&lt;style lang=&quot;scss&quot; scoped&gt;
.layout {
    text-align: center;
    padding-bottom: 100upx;
}
&lt;/style&gt;
</code></pre>
<h3 id="tabbar页面">TabBar页面</h3>
<p>不能使用onLoad和onShow生命周期，建议使用<strong>mounted</strong>初始化数据</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Electron+ElementUI输入框键盘回车事件白屏]]></title>
        <id>https://kaobeimao.github.io/post/tm-55fOUc/</id>
        <link href="https://kaobeimao.github.io/post/tm-55fOUc/">
        </link>
        <updated>2019-10-24T07:06:05.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>When there is only one single-line text input field in a form, the user agent should accept Enter in that field as a request to submit the form.</p>
</blockquote>
<h3 id="原因">原因</h3>
<p>w3c标准规定当一个 form 元素中只有一个输入框时，在该输入框中按下回车应提交该表单。</p>
<h3 id="解决方法">解决方法</h3>
<pre><code class="language-html">&lt;!-- 方法一：阻止这一默认行为 --&gt;
&lt;el-form @submit.native.prevent&gt;
&lt;/el-form&gt;

&lt;!-- 方法二：添加一个隐藏input --&gt;
&lt;el-input v-show=&quot;false&quot;&gt;&lt;/el-input&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JS基础知识点整理]]></title>
        <id>https://kaobeimao.github.io/post/uJ61PmWre/</id>
        <link href="https://kaobeimao.github.io/post/uJ61PmWre/">
        </link>
        <updated>2019-10-10T07:00:47.000Z</updated>
        <content type="html"><![CDATA[<h2 id="内置类型">内置类型</h2>
<blockquote>
<p>JS 中分为七种内置类型，七种内置类型又分为两大类型：基本类型和对象（Object）</p>
</blockquote>
<h3 id="原始primitive类型-基本类型">原始（Primitive）类型 | 基本类型</h3>
<p>6 种原始值，分别是：</p>
<ul>
<li><strong>boolean</strong></li>
<li><strong>null</strong></li>
<li><strong>undefined</strong></li>
<li><strong>number</strong></li>
<li><strong>string</strong></li>
<li><strong>symbol</strong></li>
</ul>
<p>JS 的数字类型是浮点类型的，没有整型。并且浮点类型基于 <strong>IEEE 754</strong> 标准实现。<strong>NaN</strong> 也属于<strong>number</strong> 类型，并且 <strong>NaN</strong> 不等于自身。</p>
<p>原始类型存储的都是<strong>值</strong>，是没有<strong>函数</strong>可以调用的，比如 <strong>undefined.toString()</strong></p>
<pre><code class="language-js">let a = 111 // 这只是字面量，不是 number 类型 111为字面量 a为变量
a.toString() // 使用时候才会转换为 Number 对象类型
</code></pre>
<h3 id="对象object类型">对象（Object）类型</h3>
<p>在 JS 中，除了原始类型那么其他的都是对象类型了。对象类型和原始类型不同的是，原始类型存储的是 <strong>值</strong>，对象类型存储的是 <strong>地址（指针）</strong>。当你创建了一个对象类型的时候，计算机会在内存中帮我们开辟一个空间来存放值，但是我们需要找到这个空间，这个空间会拥有一个地址（指针）。</p>
<pre><code class="language-js">const a = []
</code></pre>
<p>对于常量 a 来说，假设内存地址（指针）为 #001，那么在地址 #001 的位置存放了值 []，常量 a 存放了地址（指针） #001。</p>
<p>当我们将变量赋值给另外一个变量时，复制的是原本变量的地址（指针），当我们进行数据修改的时候，就会修改存放在地址（指针）上的值，也就导致了两个变量的值都发生了改变。</p>
<h2 id="typeof-instanceof">typeof &amp; instanceof</h2>
<pre><code class="language-js">/**
 * typeof 对于原始类型来说，除了 null 都可以显示正确的类型
 */
typeof 1 // 'number'
typeof '1' // 'string'
typeof undefined // 'undefined'
typeof true // 'boolean'
typeof Symbol() // 'symbol'

/**
 * typeof 对于对象来说，除了函数都会显示 object
 */
typeof [] // 'object'
typeof {} // 'object'
typeof console.log // 'function'

/**
 * 如果我们想判断一个对象的正确类型，这时候可以考虑使用 instanceof
 */
const Person = function() {}
const p1 = new Person()
p1 instanceof Person // true

var str = 'hello world'
str instanceof String // false

var str1 = new String('hello world')
str1 instanceof String // true
</code></pre>
<h2 id="类型转换">类型转换</h2>
<p>在 JS 中类型转换只有三种情况，分别是：</p>
<ul>
<li><strong>转换为布尔值</strong></li>
<li><strong>转换为数字</strong></li>
<li><strong>转换为字符串</strong></li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://kaobeimao.github.io/post-images/1570696590205.png" alt="" loading="lazy"></figure>
<h3 id="转换为布尔值">转换为布尔值</h3>
<p>在条件判断时，除了 undefined， null， false， NaN， &quot;&quot;， 0， -0，其他所有值都转为 true，包括所有对象。</p>
<h3 id="对象转原始类型">对象转原始类型</h3>
<p>对象在转换类型的时候，会调用内置的 <strong>[[ToPrimitive]]</strong> 函数</p>
<h2 id="四则运算符">四则运算符</h2>
<p>加法运算符，有以下特点：</p>
<ul>
<li><strong>运算中其中一方为字符串，那么就会把另一方也转换为字符串</strong></li>
<li><strong>如果一方不是字符串或者数字，那么会将它转换为数字或者字符串</strong></li>
</ul>
<pre><code class="language-js">1 + '1' // '11' 触发特点一，所以将数字 1 转换为字符串
true + true // 2 触发特点二，所以将 true 转为数字 1
4 + [1,2,3] // &quot;41,2,3&quot; 触发特点二，所以将数组通过 toString 转为字符串 1,2,3

/**
 * 因为 + 'b' 等于 NaN，所以结果为 &quot;aNaN&quot;，
 * 你可能也会在一些代码中看到过 + '1' 的形式来快速获取 number 类型。
 */
'a' + + 'b' // -&gt; &quot;aNaN&quot;

/**
 * 除了加法的运算符来说，只要其中一方是数字，那么另一方就会被转为数字
 */
4 * '3' // 12
4 * [] // 0
4 * [1, 2] // NaN
</code></pre>
<h2 id="比较运算符">比较运算符</h2>
<ol>
<li>如果是对象，就通过 toPrimitive 转换对象</li>
<li>如果是字符串，就通过 unicode 字符索引来比较</li>
</ol>
<pre><code class="language-js">/**
 * 因为 a 是对象，所以会通过 valueOf 转换为原始类型再比较值
 */
let a = {
  valueOf() {
    return 0
  },
  toString() {
    return '1'
  }
}
a &gt; -1 // true
</code></pre>
<h2 id="this">this</h2>
<figure data-type="image" tabindex="2"><img src="https://kaobeimao.github.io/post-images/1571381565249.png" alt="" loading="lazy"></figure>
<h2 id="">=== &amp; ==</h2>
<p>=== 就是判断两者类型和值是否相同<br>
== 流程：</p>
<ol>
<li>
<p>首先会判断两者类型是否相同。相同的话就是比大小了</p>
</li>
<li>
<p>类型不相同的话，那么就会进行类型转换</p>
</li>
<li>
<p>会先判断是否在对比 <strong>null</strong> 和 <strong>undefined</strong>，是的话就会返回 <strong>true</strong></p>
</li>
<li>
<p>判断两者类型是否为 <strong>string</strong> 和 <strong>number</strong>，是的话就会将字符串转换为 <strong>number</strong></p>
<pre><code class="language-js">1 == '1'
      ↓
1 ==  1
</code></pre>
</li>
<li>
<p>判断其中一方是否为 <strong>boolean</strong>，是的话就会把 <strong>boolean</strong> 转为 <strong>number</strong> 再进行判断</p>
<pre><code class="language-js">'1' == true
        ↓
'1' ==  1
        ↓
 1  ==  1
</code></pre>
</li>
<li>
<p>判断其中一方是否为 <strong>object</strong> 且另一方为 <strong>string</strong>、<strong>number</strong> 或者 <strong>symbol</strong>，是的话就会把 <strong>object</strong> 转为原始类型再进行判断</p>
<pre><code class="language-js">'1' == { name: 'yck' }
              ↓
'1' == '[object Object]'
</code></pre>
</li>
</ol>
<h2 id="闭包">闭包</h2>
<p>函数 A 内部有一个函数 B，函数 B 可以访问到函数 A 中的变量，那么函数 B 就是闭包。在 JS 中，闭包存在的意义就是让我们可以间接访问函数内部的变量。</p>
<pre><code class="language-js">function A() {
  let a = 1
  window.B = function () {
      console.log(a)
  }
}
A()
B() // 1
</code></pre>
<h2 id="深浅拷贝">深浅拷贝</h2>
<p>对象类型在赋值的过程中其实是复制了地址，从而会导致改变了一方其他也都被改变的情况。可以使用浅拷贝来解决这个情况</p>
<ol>
<li>
<p><strong>Object.assign</strong> 只会拷贝所有的属性值到新的对象中，如果属性值是对象的话，拷贝的是地址，所以并不是深拷贝。</p>
</li>
<li>
<p><strong>...</strong> 展开运算符</p>
</li>
</ol>
<pre><code class="language-js">// Object.assign
let a = {
  age: 1
}
let b = Object.assign({}, a)
a.age = 2
console.log(b.age) // 1

// ...
let a = {
  age: 1
}
let b = { ...a }
a.age = 2
console.log(b.age) // 1
</code></pre>
<p><strong>JSON.parse(JSON.stringify(object))</strong> 能解决大多数深拷贝需求</p>
<h2 id="原型">原型</h2>
<p>...</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Boolean Skill]]></title>
        <id>https://kaobeimao.github.io/post/P-LlCRZyP/</id>
        <link href="https://kaobeimao.github.io/post/P-LlCRZyP/">
        </link>
        <updated>2019-10-07T12:12:32.000Z</updated>
        <content type="html"><![CDATA[<h2 id="switchcase使用区间">switch/case使用区间</h2>
<pre><code class="language-js">const age = 26;
switch (true) {
    case isNaN(age):
        console.log(&quot;not a number&quot;);
        break;
    case (age &lt; 18):
        console.log(&quot;under age&quot;);
        break;
    case (age &gt;= 18):
        console.log(&quot;adult&quot;);
        break;
    default:
        console.log(&quot;please set your age&quot;);
        break;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[扩展运算符]]></title>
        <id>https://kaobeimao.github.io/post/eSPILDxPr/</id>
        <link href="https://kaobeimao.github.io/post/eSPILDxPr/">
        </link>
        <updated>2019-10-07T11:19:47.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>展开语法(Spread syntax), 可以在函数调用/数组构造时, 将数组表达式或者string在语法层面展开；还可以在构造字面量对象时, 将对象表达式按key-value的方式展开。(字面量一般指 [1, 2, 3] 或者 {name: &quot;mdn&quot;} 这种简洁的构造方式)</p>
</blockquote>
<h2 id="数组的扩展">数组的扩展</h2>
<pre><code class="language-js">// 复制数组（浅拷贝）
const a1 = [1, 2]
const a2 = [...a1]

// 合并数组（浅拷贝）
const arr1 = ['1', '2']
const arr2 = ['c', {a:1}]
const arr3 = [...arr1, ...arr2]

/**
 * 将字符串转化为数组
 * 使用扩展运算符能够正确识别四个字节的 Unicode 字符。
 * 凡是涉及到操作四个字节的 Unicode 字  * 符的函数，都有这个问题。
 * 因此，最好都用扩展运算符改写。
 */
[...'wdnmd'] // [&quot;w&quot;, &quot;d&quot;, &quot;n&quot;, &quot;m&quot;, &quot;d&quot;]

// 实现了 Iterator 接口的对象
let nodeList = document.querySelectorAll('div')
let arr = [...nodeList]
</code></pre>
<h2 id="对象的拓展">对象的拓展</h2>
<pre><code class="language-js">/**
 * 对象的扩展运算符用于取出参数对象的所有可遍历属性,拷贝到当前对象之中
 * 等同于使用Object.assign()方法
 */
let a = {w: 'xu', y: 'xi'}
let b = {name: '12'}
let ab = { ...a, ...b }
// 等同于
let ab = Object.assign({}, a, b)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[axios封装]]></title>
        <id>https://kaobeimao.github.io/post/cM6N64RQ8/</id>
        <link href="https://kaobeimao.github.io/post/cM6N64RQ8/">
        </link>
        <updated>2019-10-07T11:03:10.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-js">/**
 * axios封装
 * 请求拦截、响应拦截、错误统一处理
 */
import axios from 'axios'
import router from '../../router'
import store from '../../store/index'
import { Message } from 'element-ui'

/**
 * 提示函数
 * 禁止点击蒙层、显示一秒后关闭
 */
const tip = msg =&gt; {
    Message({
        type: 'error',
        message: msg
    })
}

/**
 * 跳转登录页
 * 携带当前页面路由，以期在登录页面完成登录后返回当前页面
 */
const toLogin = () =&gt; {
    router.replace({
        path: '/login',
        query: {
            redirect: router.currentRoute.fullPath
        }
    })
}

/**
 * 请求失败后的错误统一处理
 * @param {Number}   请求失败的状态码
 */
const errorHandle = (status, other) =&gt; {
    // 状态码判断
    switch (status) {
        // 401: 未登录状态，跳转登录页
        case 401:
            toLogin()
            break
        // 403 token过期
        // 清除token并跳转登录页
        case 403:
            tip(`${status}:登录过期，请重新登录`)
            localStorage.removeItem('token')
            setTimeout(() =&gt; {
                toLogin()
            }, 1000)
            break
        // 404请求不存在
        case 404:
            tip(`${status}:请求的资源不存在`)
            break
        default:
            console.log(other)
    }
}

// 创建axios实例
let instance = axios.create({ timeout: 1000 * 12 })

// 设置post请求头
instance.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded'

/**
 * 请求拦截器
 * 每次请求前，如果存在token则在请求头中携带token
 */
instance.interceptors.request.use(
    config =&gt; {
        // 登录流程控制中，根据本地是否存在token判断用户的登录情况
        // 但是即使token存在，也有可能token是过期的，所以在每次的请求头中携带token
        // 后台根据携带的token判断用户的登录情况，并返回给我们对应的状态码
        // 而后我们可以在响应拦截器中，根据状态码进行一些统一的操作。
        const token = store.state.token
        token &amp;&amp; (config.headers.Authorization = token)
        return config
    },
    error =&gt; Promise.error(error)
)

// 响应拦截器
instance.interceptors.response.use(
    // 请求成功
    res =&gt; (res.status === 200 ? Promise.resolve(res.data) : Promise.reject(res)),
    // 请求失败
    error =&gt; {
        const { response } = error
        if (response) {
            // 请求已发出，但是不在2xx的范围
            errorHandle(response.status, response.data.message)
            return Promise.reject(response)
        } else {
            // 处理断网的情况
            // eg:请求超时或断网时，更新state的network状态
            // network状态在app.vue中控制着一个全局的断网提示组件的显示隐藏
            // 关于断网组件中的刷新重新获取数据，会在断网组件中说明
            if (!window.navigator.onLine) {
            } else {
                return Promise.reject(error)
            }
        }
    }
)

export default instance
</code></pre>
]]></content>
    </entry>
</feed>